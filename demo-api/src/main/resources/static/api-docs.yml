openapi: 3.0.1
info:
  title: Rest API Application
  description: Demo project
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: local
tags:
  - name: Phone
    description: Phone API
  - name: Profile
    description: Profile API
  - name: User
    description: User API

paths:
  #  <------------- PHONE ------------->
  /api/v1/phones/find/criteria:
    get:
      tags:
        - Phone
      summary: find all phones by criteria
      operationId: findAllPhoneByCriteria
      parameters:
        - name: filter
          in: query
          schema:
            $ref: '#/components/schemas/PhoneCriteriaFilter'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PagePhoneResponse'
  /api/v1/phones/find/all:
    get:
      tags:
        - Phone
      summary: find all phones
      operationId: findAllPhone
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhoneResponse'
  /api/v1/phones/{id}:
    get:
      tags:
        - Phone
      summary: find phone by id
      operationId: findPhoneById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PhoneResponse'
    delete:
      tags:
        - Phone
      summary: delete phone by id
      operationId: deletePhone
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
  /api/v1/phones/create/{userId}:
    post:
      tags:
        - Phone
      summary: create new phone
      operationId: addPhone
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: phone
          in: query
          schema:
            $ref: '#/components/schemas/PhoneRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PhoneResponse'
  /api/v1/phones/update/{phoneId}:
    patch:
      tags:
        - Phone
      summary: update phone by id
      operationId: updatePhone
      parameters:
        - name: phoneId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: phone
          in: query
          schema:
            $ref: '#/components/schemas/PhoneRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PhoneResponse'
  #  <------------- END PHONE ------------->

  #  <------------- PROFILE ------------->
  /api/v1/profile/find/criteria:
    get:
      tags:
        - Profile
      summary: find all Profile by criteria
      operationId: findAllProfileByCriteria
      parameters:
        - name: filter
          in: query
          schema:
            $ref: '#/components/schemas/ProfileCriteriaFilter'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PageProfileResponse'
  /api/v1/profile/find/all:
    get:
      tags:
        - Profile
      summary: find all Profile
      operationId: findAllProfile
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileResponse'
  /api/v1/profile/{id}:
    get:
      tags:
        - Profile
      summary: find Profile by id
      operationId: findProfileById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProfileResponse'
    delete:
      tags:
        - Profile
      summary: delete Profile by id
      operationId: deleteProfile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
  /api/v1/profile/create/{userId}:
    post:
      tags:
        - Profile
      summary: create new Profile
      operationId: addProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: profile
          in: query
          schema:
            $ref: '#/components/schemas/ProfileRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProfileResponse'
  /api/v1/profile/update:
    patch:
      tags:
        - Profile
      summary: update Profile by id
      operationId: updateProfile
      parameters:
        - name: profile
          in: query
          schema:
            $ref: '#/components/schemas/ProfileRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProfileResponse'
  #  <------------- END PROFILE ------------->

  #  <------------- USER ------------->
  /api/v1/user/find/criteria:
    get:
      tags:
        - User
      summary: find all User by criteria
      operationId: findAllUserByCriteria
      parameters:
        - name: filter
          in: query
          schema:
            $ref: '#/components/schemas/UserCriteriaFilter'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PageUserResponse'
  /api/v1/user/find/all:
    get:
      tags:
        - User
      summary: find all User
      operationId: findAllUser
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
  /api/v1/user/{id}:
    get:
      tags:
        - User
      summary: find User by id
      operationId: findUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserResponse'
    delete:
      tags:
        - User
      summary: delete User by id
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
  /api/v1/user/create:
    post:
      tags:
        - User
      summary: create new User
      operationId: addUser
      parameters:
        - name: user
          in: query
          schema:
            $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserResponse'
  /api/v1/user/update:
    patch:
      tags:
        - User
      summary: update User by id
      operationId: updateUser
      parameters:
        - name: user
          in: query
          schema:
            $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserResponse'
  #  <------------- END USER ------------->


components:
  schemas:
    #    --------------- Request ---------------
    PhoneCriteriaFilter:
      allOf:
        - $ref: "#/components/schemas/BaseFilter"
        - type: object
      properties:
        value:
          type: string
        likeValue:
          type: string
        userIds:
          type: array
          items:
            type: integer
            format: int64
        likeUserName:
          type: string
        userNames:
          type: array
          items:
            type: string
        userAge:
          type: integer
          format: int32
        maxUserAge:
          type: integer
          format: int32
        minUserAge:
          type: integer
          format: int32
        likeUserEmail:
          type: string
        userEmails:
          type: array
          items:
            type: string
    ProfileCriteriaFilter:
      allOf:
        - $ref: "#/components/schemas/BaseFilter"
        - type: object
      properties:
        cash:
          type: number
        minCash:
          type: number
        maxCash:
          type: number
        userId:
          type: string
        userIds:
          type: array
          items:
            type: integer
            format: int64
        userName:
          type: string
        userNames:
          type: array
          items:
            type: string
        userEmail:
          type: string
        userEmails:
          type: array
          items:
            type: string
    UserCriteriaFilter:
      allOf:
        - $ref: "#/components/schemas/BaseFilter"
        - type: object
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32
        email:
          type: string
        profileIds:
          type: array
          items:
            type: integer
            format: int64

    PhoneRequest:
      type: object
      properties:
        value:
          type: string
          description: phone number
    ProfileRequest:
      type: object
      properties:
        cash:
          type: number
    UserRequest:
      type: object
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32
        email:
          type: string

    AuthorizationRequest:
      type: object
      properties:
        email:
          type: string
    
    #    --------------- Response ---------------
    PagePhoneResponse:
      allOf:
        - $ref: "#/components/schemas/BasePage"
        - type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PhoneResponse'
    PageProfileResponse:
      allOf:
        - $ref: "#/components/schemas/BasePage"
        - type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProfileResponse'
    PageUserResponse:
      allOf:
        - $ref: "#/components/schemas/BasePage"
        - type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'


    PhoneResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
    ProfileResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cash:
          type: number
        maxCash:
          type: number
        user:
          $ref: '#/components/schemas/UserResponse'
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int32
        email:
          type: string
        profile:
          $ref: '#/components/schemas/ProfileResponse'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneResponse'

    AuthorizationResponse:
      type: object
      properties:
        email:
          type: string
        token:
          type: string
    
    #   <------------- Base DTO ------------->
    BaseFilter:
      type: object
      properties:
        id:
          type: integer
          format: int64
        pageSize:
          type: integer
          default: 10
        pageNumber:
          type: integer
          default: 0
        sort:
          type: array
          items:
            type: string
    BasePage:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        last:
          type: boolean
        empty:
          type: boolean
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    Pageable:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean